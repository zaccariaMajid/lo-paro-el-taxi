// <auto-generated />
using System;
using ElTaxi.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ElTaxi.Infrastructure.Migrations
{
    [DbContext(typeof(ElTaxiDbContext))]
    partial class ElTaxiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ElTaxi.BuildingBlocks.Domain.Entity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.DriverProfile", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<decimal>("AverageRating")
                        .HasColumnType("numeric");

                    b.Property<string>("CurrentLatitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CurrentLongitude")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("LastPingAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TotalRides")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("VehicleId")
                        .HasColumnType("uuid");

                    b.ToTable("DriverProfiles");
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Notification", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Payment", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<decimal>("AmountInCents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("integer");

                    b.Property<int>("Method")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Ping", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<int>("Accuracy")
                        .HasColumnType("integer");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<int>("Heading")
                        .HasColumnType("integer");

                    b.Property<string>("Latitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Longitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Speed")
                        .HasColumnType("numeric");

                    b.ToTable("Pings", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.PricingRule", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<DateTime>("ActiveFrom")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ActiveTo")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("BaseFareInCents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostPerKmInCents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostPerMinuteInCents")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SurgeMultiplier")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("VehicleType")
                        .HasColumnType("integer");

                    b.ToTable("PricingRules", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Review", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<string>("Comments")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<Guid>("RevieweeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RideId")
                        .HasColumnType("uuid");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Ride", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DistanceInKm")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uuid");

                    b.Property<int?>("DriverRating")
                        .HasColumnType("integer");

                    b.Property<string>("DropOffLatitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DropOffLongitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("EstimatedDurationInMinutes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("EstimatedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("FinalPice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("PickupLatitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PickupLongitude")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RiderId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RiderRating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.ToTable("Rides", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.RiderProfile", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<decimal>("AverageRating")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(3,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("PreferredPaymentType")
                        .HasColumnType("integer");

                    b.Property<int>("TotalRides")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.ToTable("RiderProfiles", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.User", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("lastLoginAt")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Vehicle", b =>
                {
                    b.HasBaseType("ElTaxi.BuildingBlocks.Domain.Entity");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Seats")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.ToTable("Vehicles", (string)null);
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.DriverProfile", b =>
                {
                    b.OwnsOne("ElTaxi.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("DriverProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("CountryCode");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("RowVersion");

                            b1.HasKey("DriverProfileId");

                            b1.ToTable("DriverProfiles");

                            b1.WithOwner()
                                .HasForeignKey("DriverProfileId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.Ride", b =>
                {
                    b.OwnsOne("ElTaxi.Domain.ValueObjects.Address", "DropOffAddress", b1 =>
                        {
                            b1.Property<Guid>("RideId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("RowVersion");

                            b1.HasKey("RideId");

                            b1.ToTable("Rides");

                            b1.WithOwner()
                                .HasForeignKey("RideId");
                        });

                    b.OwnsOne("ElTaxi.Domain.ValueObjects.Address", "PickUpAddress", b1 =>
                        {
                            b1.Property<Guid>("RideId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("character varying(20)");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("RowVersion");

                            b1.HasKey("RideId");

                            b1.ToTable("Rides");

                            b1.WithOwner()
                                .HasForeignKey("RideId");
                        });

                    b.Navigation("DropOffAddress")
                        .IsRequired();

                    b.Navigation("PickUpAddress")
                        .IsRequired();
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.RiderProfile", b =>
                {
                    b.OwnsOne("ElTaxi.Domain.ValueObjects.PhoneNumber", "PhoneNumber", b1 =>
                        {
                            b1.Property<Guid>("RiderProfileId")
                                .HasColumnType("uuid");

                            b1.Property<string>("CountryCode")
                                .IsRequired()
                                .HasMaxLength(5)
                                .HasColumnType("character varying(5)")
                                .HasColumnName("CountryCode");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)")
                                .HasColumnName("PhoneNumber");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("RowVersion");

                            b1.HasKey("RiderProfileId");

                            b1.ToTable("RiderProfiles");

                            b1.WithOwner()
                                .HasForeignKey("RiderProfileId");
                        });

                    b.Navigation("PhoneNumber")
                        .IsRequired();
                });

            modelBuilder.Entity("ElTaxi.Domain.Aggregates.User", b =>
                {
                    b.OwnsOne("ElTaxi.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("Email");

                            b1.Property<byte[]>("_TableSharingConcurrencyTokenConvention_RowVersion")
                                .IsConcurrencyToken()
                                .IsRequired()
                                .ValueGeneratedOnAddOrUpdate()
                                .HasColumnType("bytea")
                                .HasColumnName("RowVersion");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
